"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_ts"],{

/***/ "../pkg/snippets/wasm_game-241beec059bdfc2f/www/utils/random.js":
/*!**********************************************************************!*\
  !*** ../pkg/snippets/wasm_game-241beec059bdfc2f/www/utils/random.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"random\": () => (/* binding */ random)\n/* harmony export */ });\nfunction random(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://www/../pkg/snippets/wasm_game-241beec059bdfc2f/www/utils/random.js?");

/***/ }),

/***/ "../pkg/wasm_game.js":
/*!***************************!*\
  !*** ../pkg/wasm_game.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameStatus\": () => (/* binding */ GameStatus),\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"World\": () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _snippets_wasm_game_241beec059bdfc2f_www_utils_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/wasm_game-241beec059bdfc2f/www/utils/random.js */ \"../pkg/snippets/wasm_game-241beec059bdfc2f/www/utils/random.js\");\n\n\nlet wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nconst GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Played:2,\"2\":\"Played\", });\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Down:1,\"1\":\"Down\",Left:2,\"2\":\"Left\",Right:3,\"3\":\"Right\", });\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        const obj = Object.create(World.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} snake_index\n    * @returns {World}\n    */\n    static new(width, snake_index) {\n        var ret = wasm.world_new(width, snake_index);\n        return World.__wrap(ret);\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.ptr);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    game_status() {\n        var ret = wasm.world_game_status(this.ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    game_status_info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_game_status_info(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    reward_cell() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_reward_cell(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.world_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_head_index() {\n        var ret = wasm.world_snake_head_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} direction\n    */\n    change_snake_direction(direction) {\n        wasm.world_change_snake_direction(this.ptr, direction);\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cells() {\n        var ret = wasm.world_snake_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_length() {\n        var ret = wasm.world_snake_length(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    update() {\n        wasm.world_update(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! wasm_game_bg.wasm */ \"../pkg/wasm_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_random_2cf905fb4305bc1b = function(arg0) {\n        var ret = (0,_snippets_wasm_game_241beec059bdfc2f_www_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.random)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n\n//# sourceURL=webpack://www/../pkg/wasm_game.js?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm_game */ \"../pkg/wasm_game.js\");\n/* harmony import */ var _utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/random */ \"./utils/random.js\");\n\n\n(0,wasm_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().then(function (wasm) {\n    var CELL_SIZE = 20;\n    var WORLD_WIDTH = 20;\n    var snakeIndex = (0,_utils_random__WEBPACK_IMPORTED_MODULE_0__.random)(WORLD_WIDTH * WORLD_WIDTH);\n    var world = wasm_game__WEBPACK_IMPORTED_MODULE_1__.World[\"new\"](WORLD_WIDTH, snakeIndex);\n    var worldWidth = world.width();\n    var fps = 2;\n    var gameStatus = document.getElementById(\"game-status\");\n    var gameControlBtn = document.getElementById(\"game-control-btn\");\n    var canvas = document.getElementById(\"snake-world\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = worldWidth * CELL_SIZE;\n    canvas.height = worldWidth * CELL_SIZE;\n    gameControlBtn.addEventListener(\"click\", function () {\n        var status = world.game_status();\n        if (status == undefined) {\n            gameControlBtn.textContent = \"RESTART\";\n            // gameControlBtn.textContent = \"游戏中...\";\n            world.start_game();\n            run();\n        }\n        else {\n            location.reload();\n        }\n    });\n    document.addEventListener(\"keydown\", function (e) {\n        switch (e.code) {\n            case \"ArrowUp\":\n                world.change_snake_direction(wasm_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Up);\n                break;\n            case \"ArrowDown\":\n                world.change_snake_direction(wasm_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Down);\n                break;\n            case \"ArrowLeft\":\n                world.change_snake_direction(wasm_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Left);\n                break;\n            case \"ArrowRight\":\n                world.change_snake_direction(wasm_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Right);\n                break;\n        }\n    });\n    function drawWorld() {\n        context.beginPath();\n        for (var x = 0; x < worldWidth + 1; x++) {\n            context.moveTo(CELL_SIZE * x, 0);\n            context.lineTo(CELL_SIZE * x, CELL_SIZE * worldWidth);\n        }\n        for (var y = 0; y < worldWidth + 1; y++) {\n            context.moveTo(0, CELL_SIZE * y);\n            context.lineTo(CELL_SIZE * worldWidth, CELL_SIZE * y);\n        }\n        context.stroke();\n    }\n    function drawSnake() {\n        var snakeCells = new Uint32Array(wasm.memory.buffer, world.snake_cells(), world.snake_length());\n        snakeCells\n            .filter(function (cellIdx, i) { return !(i > 0 && cellIdx == snakeCells[0]); })\n            .forEach(function (cellIndex, i) {\n            var col = cellIndex % worldWidth;\n            var row = Math.floor(cellIndex / worldWidth);\n            context.beginPath();\n            context.fillStyle = i === 0 ? '#787878' : '#000000';\n            context.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        });\n        context.stroke();\n    }\n    function drawReward() {\n        var index = world.reward_cell();\n        var row = Math.floor(index / worldWidth);\n        var col = index % worldWidth;\n        context.beginPath();\n        context.fillStyle = '#FF0000';\n        context.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        context.stroke();\n    }\n    function drawGameStatus() {\n        gameStatus.textContent = world.game_status_info();\n    }\n    function draw() {\n        drawWorld();\n        drawSnake();\n        drawReward();\n        drawGameStatus();\n    }\n    function run() {\n        var status = world.game_status();\n        if (status === wasm_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Won || status == wasm_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Lost) {\n            gameControlBtn.textContent = \"AGAIN？\";\n            return;\n        }\n        setTimeout(function () {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            world.update();\n            draw();\n            requestAnimationFrame(run);\n        }, 1000 / fps);\n    }\n    draw();\n});\n\n\n//# sourceURL=webpack://www/./index.ts?");

/***/ }),

/***/ "./utils/random.js":
/*!*************************!*\
  !*** ./utils/random.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"random\": () => (/* binding */ random)\n/* harmony export */ });\nfunction random(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://www/./utils/random.js?");

/***/ }),

/***/ "../pkg/wasm_game_bg.wasm":
/*!********************************!*\
  !*** ../pkg/wasm_game_bg.wasm ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"f41f24c67966d74e6b84.wasm\";\n\n//# sourceURL=webpack://www/../pkg/wasm_game_bg.wasm?");

/***/ })

}]);